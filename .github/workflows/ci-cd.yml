name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - develop
      - qa
      - prod

  pull_request:

jobs:
  configure:
    runs-on: [self-hosted, small]
    outputs:
      image_tag: ${{ steps.COMPUTE_VERSION.outputs.version }}-${{ steps.COMPUTE_FINGERPRINT.outputs.fingerprint }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract fingerprint
        id: COMPUTE_FINGERPRINT
        shell: bash
        run: echo "fingerprint=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - uses: paulhatch/semantic-version@master
        id: COMPUTE_VERSION
        with:
          tag_prefix: v
          major_pattern: "/^[Bb][Rr][Ee][Aa][Kk][Ii][Nn][Gg]/"
          minor_pattern: "/^[Ff][Ee][Aa][Tt]/"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true

  build-dev:
    needs:
      - configure
    runs-on: [self-hosted, large]
    permissions:
      packages: write
      contents: read
    outputs:
      app_dev_image_name: ${{ steps.EXPORT_IMAGE_NAMES.outputs.app_dev_image_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        uses: ./.github/actions/build-image
        with:
          tag: ghcr.io/${{ github.repository }}:${{ needs.configure.outputs.image_tag }}
          target: app
          app_version: ${{ needs.configure.outputs.image_tag }}
          dockerfile: Dockerfile
      - name: Export image names
        id: EXPORT_IMAGE_NAMES
        run: |
          echo "app_dev_image_name=ghcr.io/${{ github.repository }}:${{ needs.configure.outputs.image_tag }}" >> $GITHUB_OUTPUT

  test-lint:
    needs:
      - build-dev
    runs-on: [self-hosted, medium]
    permissions:
      packages: read
      contents: read
    container:
      image: ${{ needs.build-dev.outputs.app_dev_image_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Lint tests
        working-directory: /srv/app
        run: task test-lint

  test-static-analysis:
    needs:
      - build-dev
    runs-on: [self-hosted, medium]
    container:
      image: ${{ needs.build-dev.outputs.app_dev_image_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Static analysis tests
        working-directory: /srv/app
        run: task test-static-analysis

  test-unit:
    needs:
      - build-dev
    runs-on: [self-hosted, medium]
    container:
      image: ${{ needs.build-dev.outputs.app_dev_image_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Unit tests
        working-directory: /srv/app
        run: task test-unit

  test-functional:
    name: test-functional
    needs:
      - build-dev
    runs-on: [self-hosted, medium]
    container:
      image: ${{ needs.build-dev.outputs.app_dev_image_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      CACHE_DSN: "redis://redis:6379/1"
      AMQP_DSN: amqp://gha-user:gha-pwd@rabbitmq:5672
      DB_DSN: "postgres://gha-user:gha-pwd@postgres:5432/app?serverVersion=14&charset=utf8"
    services:
      redis:
        # Docker Hub image
        image: redis:5.0.5
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:14.1-alpine
        env:
          POSTGRES_DB: app
          POSTGRES_USER: gha-user
          POSTGRES_PASSWORD: gha-pwd
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Functional tests
        working-directory: /srv/app
        run: task test-functional
